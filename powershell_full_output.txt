============================= test session starts =============================
platform win32 -- Python 3.12.8, pytest-8.3.4, pluggy-1.5.0 -- C:\Users\benbu\AppData\Local\Microsoft\WindowsApps\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\benbu\Code\temp3
configfile: pytest.ini
testpaths: tests
plugins: anyio-4.7.0, asyncio-0.23.6, cov-6.0.0, timeout-2.3.1, requests-mock-1.12.1
asyncio: mode=Mode.STRICT
collecting ... collected 81 items

tests/test_base_component.py::TestBaseComponent::test_convert_length PASSED [  1%]
tests/test_base_component.py::TestBaseComponent::test_convert_length_errors PASSED [  2%]
tests/test_base_component.py::TestBaseComponent::test_init PASSED        [  3%]
tests/test_base_component.py::TestBaseComponent::test_init_invalid_material PASSED [  4%]
tests/test_base_component.py::TestBaseComponent::test_material_property PASSED [  6%]
tests/test_base_component.py::TestBaseComponent::test_validate_geometry PASSED [  7%]
tests/test_base_component.py::TestBaseComponent::test_validate_length PASSED [  8%]
tests/test_base_component.py::TestBaseComponent::test_validate_length_errors PASSED [  9%]
tests/test_clamped_components.py::TestWasher::test_invalid_dimensions PASSED [ 11%]
tests/test_clamped_components.py::TestWasher::test_invalid_material PASSED [ 12%]
tests/test_clamped_components.py::TestWasher::test_property_access PASSED [ 13%]
tests/test_clamped_components.py::TestWasher::test_unit_conversion PASSED [ 14%]
tests/test_clamped_components.py::TestWasher::test_valid_creation PASSED [ 16%]
tests/test_clamped_components.py::TestPlateComponent::test_invalid_dimensions PASSED [ 17%]
tests/test_clamped_components.py::TestPlateComponent::test_invalid_material PASSED [ 18%]
tests/test_clamped_components.py::TestPlateComponent::test_property_access PASSED [ 19%]
tests/test_clamped_components.py::TestPlateComponent::test_unit_conversion PASSED [ 20%]
tests/test_clamped_components.py::TestPlateComponent::test_valid_creation PASSED [ 22%]
tests/test_junction.py::TestJunction::test_add_remove_clamped_component PASSED [ 23%]
tests/test_junction.py::TestJunction::test_component_updates FAILED      [ 24%]
tests/test_junction.py::TestJunction::test_duplicate_components PASSED   [ 25%]
tests/test_junction.py::TestJunction::test_grip_length PASSED            [ 27%]
tests/test_junction.py::TestJunction::test_insufficient_fastener_length FAILED [ 28%]
tests/test_junction.py::TestJunction::test_invalid_assembly FAILED       [ 29%]
tests/test_junction.py::TestJunction::test_junction_creation PASSED      [ 30%]
tests/test_junction.py::TestJunction::test_metric_units FAILED           [ 32%]
tests/test_junction.py::TestJunction::test_minimum_components FAILED     [ 33%]
tests/test_junction.py::TestJunction::test_stack_up_thickness SKIPPED    [ 34%]
tests/test_junction.py::TestJunction::test_threaded_plate SKIPPED (S...) [ 35%]
tests/test_material.py::TestMaterial::test_density PASSED                [ 37%]
tests/test_material.py::TestMaterial::test_elastic_modulus PASSED        [ 38%]
tests/test_material.py::TestMaterial::test_identify PASSED               [ 39%]
tests/test_material.py::TestMaterial::test_poisson_ratio PASSED          [ 40%]
tests/test_material.py::TestMaterial::test_property_access_before_setting PASSED [ 41%]
tests/test_material.py::TestMaterial::test_thermal_expansion PASSED      [ 43%]
tests/test_material.py::TestMaterial::test_ultimate_strength PASSED      [ 44%]
tests/test_material.py::TestMaterial::test_yield_strength PASSED         [ 45%]
tests/test_standard_materials.py::TestStandardMaterials::test_aluminum_default_values PASSED [ 46%]
tests/test_standard_materials.py::TestStandardMaterials::test_aluminum_unit_conversions PASSED [ 48%]
tests/test_standard_materials.py::TestStandardMaterials::test_aluminum_validation PASSED [ 49%]
tests/test_standard_materials.py::TestStandardMaterials::test_property_modification PASSED [ 50%]
tests/test_standard_materials.py::TestStandardMaterials::test_steel_default_values PASSED [ 51%]
tests/test_standard_materials.py::TestStandardMaterials::test_steel_unit_conversions PASSED [ 53%]
tests/test_standard_materials.py::TestStandardMaterials::test_steel_validation PASSED [ 54%]
tests/test_standard_materials.py::TestStandardMaterials::test_unit_compatibility PASSED [ 55%]
tests/test_thread_utils.py::TestThreadUtils::test_calculate_diameters PASSED [ 56%]
tests/test_thread_utils.py::TestThreadUtils::test_extract_thread_dimensions PASSED [ 58%]
tests/test_thread_utils.py::TestThreadUtils::test_parse_thread_specification PASSED [ 59%]
tests/test_thread_utils.py::TestThreadUtils::test_thread_compatibility PASSED [ 60%]
tests/test_thread_utils.py::TestThreadUtils::test_thread_validation PASSED [ 61%]
tests/test_thread_utils.py::TestThreadUtils::test_validate_thread_format FAILED [ 62%]
tests/test_threaded_components.py::TestFastener::test_fastener_creation FAILED [ 64%]
tests/test_threaded_components.py::TestFastener::test_invalid_dimensions PASSED [ 65%]
tests/test_threaded_components.py::TestFastener::test_property_setters FAILED [ 66%]
tests/test_threaded_components.py::TestFastener::test_unit_conversion FAILED [ 67%]
tests/test_threaded_components.py::TestNut::test_invalid_dimensions FAILED [ 69%]
tests/test_threaded_components.py::TestNut::test_nut_creation FAILED     [ 70%]
tests/test_threaded_components.py::TestNut::test_property_setters FAILED [ 71%]
tests/test_threaded_components.py::TestNut::test_unit_conversion FAILED  [ 72%]
tests/test_threaded_plate.py::TestThreadedPlate::test_imperial_units FAILED [ 74%]
tests/test_threaded_plate.py::TestThreadedPlate::test_initialization FAILED [ 75%]
tests/test_threaded_plate.py::TestThreadedPlate::test_initialization_with_defaults FAILED [ 76%]
tests/test_threaded_plate.py::TestThreadedPlate::test_initialization_with_numeric_values FAILED [ 77%]
tests/test_threaded_plate.py::TestThreadedPlate::test_invalid_clearance_hole FAILED [ 79%]
tests/test_threaded_plate.py::TestThreadedPlate::test_invalid_property_values FAILED [ 80%]
tests/test_threaded_plate.py::TestThreadedPlate::test_invalid_thread_spec FAILED [ 81%]
tests/test_threaded_plate.py::TestThreadedPlate::test_invalid_threaded_length FAILED [ 82%]
tests/test_threaded_plate.py::TestThreadedPlate::test_property_setters FAILED [ 83%]
tests/test_threaded_plate.py::TestThreadedPlate::test_unit_conversion FAILED [ 85%]
tests/test_unit_utils.py::TestUnitUtils::test_are_units_compatible PASSED [ 86%]
tests/test_unit_utils.py::TestUnitUtils::test_compare_with_tolerance PASSED [ 87%]
tests/test_unit_utils.py::TestUnitUtils::test_format_quantity PASSED     [ 88%]
tests/test_unit_utils.py::TestUnitUtils::test_format_with_units PASSED   [ 90%]
tests/test_unit_utils.py::TestUnitUtils::test_is_valid_unit_type PASSED  [ 91%]
tests/test_unit_utils.py::TestUnitUtils::test_safe_add PASSED            [ 92%]
tests/test_unit_utils.py::TestUnitUtils::test_safe_divide PASSED         [ 93%]
tests/test_unit_utils.py::TestUnitUtils::test_safe_multiply PASSED       [ 95%]
tests/test_unit_utils.py::TestUnitUtils::test_standardize_units PASSED   [ 96%]
tests/test_unit_utils.py::TestUnitUtils::test_to_imperial FAILED         [ 97%]
tests/test_unit_utils.py::TestUnitUtils::test_to_metric FAILED           [ 98%]
tests/test_unit_utils.py::TestUnitUtils::test_validate_unit_dimension FAILED [100%]

================================== FAILURES ===================================
_____________________ TestJunction.test_component_updates _____________________

self = <temp3.tests.test_junction.TestJunction testMethod=test_component_updates>

    def test_component_updates(self):
        """Test updating components after initial creation."""
>       new_fastener = Fastener(
            thread_spec="1/2-13",
            length=3.0 * ureg.inch,
            threaded_length=2.5 * ureg.inch,
            head_diameter=0.75 * ureg.inch,
            head_height=0.3125 * ureg.inch,
            is_flat=False,
            tool_size="3/8",
            material=self.material)

tests\test_junction.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
components\threaded_components.py:349: in __init__
    super().__init__(thread_spec=thread_spec, threaded_length=
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <components.threaded_components.Fastener object at 0x000001C976E19C70>
thread_spec = '1/2-13', threaded_length = <Quantity(2.5, 'inch')>
material = <tests.test_base_component.TestMaterial object at 0x000001C976E19C10>

    def __init__(self, thread_spec: str, threaded_length: Quantity, material: Material) -> None:
        """Initialize ThreadedComponent.
    
        Args:
            thread_spec: Thread specification (e.g., "1/4-20")
            threaded_length: Length of threaded section
            material: Component material
        """
        BaseComponent.__init__(self, material=material)
    
        # Validate thread specification
        if not is_valid_thread_spec(thread_spec):
>           raise ValueError(f'Invalid thread specification: {thread_spec}')
E           ValueError: Invalid thread specification: 1/2-13

components\threaded_components.py:304: ValueError
_______________ TestJunction.test_insufficient_fastener_length ________________

self = <temp3.tests.test_junction.TestJunction testMethod=test_insufficient_fastener_length>

    def test_insufficient_fastener_length(self):
        """Test detection of insufficient fastener length."""
>       short_fastener = Fastener(
            thread_spec="1/2-13",
            length=0.25 * ureg.inch,
            threaded_length=0.2 * ureg.inch,
            head_diameter=0.75 * ureg.inch,
            head_height=0.3125 * ureg.inch,
            is_flat=False,
            tool_size="3/8",
            material=self.material)

tests\test_junction.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
components\threaded_components.py:349: in __init__
    super().__init__(thread_spec=thread_spec, threaded_length=
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <components.threaded_components.Fastener object at 0x000001C976E1AE70>
thread_spec = '1/2-13', threaded_length = <Quantity(0.2, 'inch')>
material = <tests.test_base_component.TestMaterial object at 0x000001C976E1AF90>

    def __init__(self, thread_spec: str, threaded_length: Quantity, material: Material) -> None:
        """Initialize ThreadedComponent.
    
        Args:
            thread_spec: Thread specification (e.g., "1/4-20")
            threaded_length: Length of threaded section
            material: Component material
        """
        BaseComponent.__init__(self, material=material)
    
        # Validate thread specification
        if not is_valid_thread_spec(thread_spec):
>           raise ValueError(f'Invalid thread specification: {thread_spec}')
E           ValueError: Invalid thread specification: 1/2-13

components\threaded_components.py:304: ValueError
_____________________ TestJunction.test_invalid_assembly ______________________

self = <temp3.tests.test_junction.TestJunction testMethod=test_invalid_assembly>

    def test_invalid_assembly(self):
        """Test that invalid assemblies raise appropriate exceptions."""
>       incompatible_nut = Nut(
            thread_spec="3/8-16",
            width_across_flats=0.5625 * ureg.inch,
            height=0.3125 * ureg.inch,
            material=self.material)

tests\test_junction.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
components\threaded_components.py:417: in __init__
    super().__init__(thread_spec=thread_spec, threaded_length=height,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <components.threaded_components.Nut object at 0x000001C976E1A5A0>
thread_spec = '3/8-16', threaded_length = <Quantity(0.3125, 'inch')>
material = <tests.test_base_component.TestMaterial object at 0x000001C976E1A720>

    def __init__(self, thread_spec: str, threaded_length: Quantity, material: Material) -> None:
        """Initialize ThreadedComponent.
    
        Args:
            thread_spec: Thread specification (e.g., "1/4-20")
            threaded_length: Length of threaded section
            material: Component material
        """
        BaseComponent.__init__(self, material=material)
    
        # Validate thread specification
        if not is_valid_thread_spec(thread_spec):
>           raise ValueError(f'Invalid thread specification: {thread_spec}')
E           ValueError: Invalid thread specification: 3/8-16

components\threaded_components.py:304: ValueError
_______________________ TestJunction.test_metric_units ________________________

self = <temp3.tests.test_junction.TestJunction testMethod=test_metric_units>

    def test_metric_units(self):
        """Test junction with metric units."""
>       metric_fastener = Fastener(
            thread_spec="M12x1.75",  # Will handle metric in separate PR
            length=50 * ureg.mm,
            threaded_length=40 * ureg.mm,
            head_diameter=18 * ureg.mm,
            head_height=8 * ureg.mm,
            is_flat=False,
            tool_size="8",
            material=self.material)

tests\test_junction.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
components\threaded_components.py:349: in __init__
    super().__init__(thread_spec=thread_spec, threaded_length=
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <components.threaded_components.Fastener object at 0x000001C976E1B920>
thread_spec = 'M12x1.75', threaded_length = <Quantity(40, 'millimeter')>
material = <tests.test_base_component.TestMaterial object at 0x000001C976E1BA70>

    def __init__(self, thread_spec: str, threaded_length: Quantity, material: Material) -> None:
        """Initialize ThreadedComponent.
    
        Args:
            thread_spec: Thread specification (e.g., "1/4-20")
            threaded_length: Length of threaded section
            material: Component material
        """
        BaseComponent.__init__(self, material=material)
    
        # Validate thread specification
        if not is_valid_thread_spec(thread_spec):
>           raise ValueError(f'Invalid thread specification: {thread_spec}')
E           ValueError: Invalid thread specification: M12x1.75

components\threaded_components.py:304: ValueError
____________________ TestJunction.test_minimum_components _____________________

self = <temp3.tests.test_junction.TestJunction testMethod=test_minimum_components>

    def test_minimum_components(self):
        """Test junction with minimum required components."""
        min_junction = Junction(fastener=self.fastener, clamped_components=
            [self.plate1], threaded_member=self.nut)
        self.assertEqual(len(min_junction.clamped_components), 1)
>       self.assertEqual(min_junction.stack_up_thickness, 0.25 * ureg.inch)
E       AssertionError: <Quantity(0.6875, 'inch')> != <Quantity(0.25, 'inch')>

tests\test_junction.py:151: AssertionError
_________________ TestThreadUtils.test_validate_thread_format _________________

self = <temp3.tests.test_thread_utils.TestThreadUtils testMethod=test_validate_thread_format>

    def test_validate_thread_format(self):
        """Test thread format validation."""
        for spec in (self.valid_unc_specs + self.valid_unf_specs):
            self.assertTrue(validate_thread_format(spec))
        for spec in self.invalid_specs:
>           self.assertFalse(validate_thread_format(spec))
E           AssertionError: True is not false

tests\test_thread_utils.py:40: AssertionError
_____________________ TestFastener.test_fastener_creation _____________________

self = <temp3.tests.test_threaded_components.TestFastener testMethod=test_fastener_creation>

    def test_fastener_creation(self):
        """Test fastener creation with valid parameters."""
>       self.assertEqual(self.fastener.thread_spec, '1/4-20')
E       AssertionError: '1/4-20 UNC' != '1/4-20'
E       - 1/4-20 UNC
E       ?       ----
E       + 1/4-20

tests\test_threaded_components.py:21: AssertionError
_____________________ TestFastener.test_property_setters ______________________

self = <temp3.tests.test_threaded_components.TestFastener testMethod=test_property_setters>

    def test_property_setters(self):
        """Test property setters with validation."""
>       self.fastener.length = 2.5 * ureg.inch
E       AttributeError: property 'length' of 'Fastener' object has no setter

tests\test_threaded_components.py:54: AttributeError
______________________ TestFastener.test_unit_conversion ______________________

self = <temp3.tests.test_threaded_components.TestFastener testMethod=test_unit_conversion>

    def test_unit_conversion(self):
        """Test unit conversion between imperial and metric."""
>       metric_fastener = Fastener(thread_spec='M6x1', length=50 * ureg.mm,  # Will handle metric in separate PR
            threaded_length=40 * ureg.mm, head_diameter=12 * ureg.mm,
            head_height=6 * ureg.mm, is_flat=True, tool_size='10mm',
            material=self.material)

tests\test_threaded_components.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
components\threaded_components.py:349: in __init__
    super().__init__(thread_spec=thread_spec, threaded_length=
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <components.threaded_components.Fastener object at 0x000001C976EC5310>
thread_spec = 'M6x1', threaded_length = <Quantity(40, 'millimeter')>
material = <tests.test_base_component.TestMaterial object at 0x000001C976EC5040>

    def __init__(self, thread_spec: str, threaded_length: Quantity, material: Material) -> None:
        """Initialize ThreadedComponent.
    
        Args:
            thread_spec: Thread specification (e.g., "1/4-20")
            threaded_length: Length of threaded section
            material: Component material
        """
        BaseComponent.__init__(self, material=material)
    
        # Validate thread specification
        if not is_valid_thread_spec(thread_spec):
>           raise ValueError(f'Invalid thread specification: {thread_spec}')
E           ValueError: Invalid thread specification: M6x1

components\threaded_components.py:304: ValueError
_______________________ TestNut.test_invalid_dimensions _______________________

self = <temp3.tests.test_threaded_components.TestNut testMethod=test_invalid_dimensions>

    def setUp(self):
        """Set up test fixtures."""
        self.material = TestMaterial('Steel', {'yield_strength': 250 * ureg.MPa})
>       self.nut = Nut(thread_spec='1/4-20', width_across_flats=7 / 16 *
            ureg.inch, height=7 / 32 * ureg.inch, material=self.material)

tests\test_threaded_components.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
components\threaded_components.py:417: in __init__
    super().__init__(thread_spec=thread_spec, threaded_length=height,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <components.threaded_components.Nut object at 0x000001C976EC7020>
thread_spec = '1/4-20', threaded_length = <Quantity(0.21875, 'inch')>
material = <tests.test_base_component.TestMaterial object at 0x000001C976EC4C80>

    def __init__(self, thread_spec: str, threaded_length: Quantity, material: Material) -> None:
        """Initialize ThreadedComponent.
    
        Args:
            thread_spec: Thread specification (e.g., "1/4-20")
            threaded_length: Length of threaded section
            material: Component material
        """
        BaseComponent.__init__(self, material=material)
    
        # Validate thread specification
        if not is_valid_thread_spec(thread_spec):
>           raise ValueError(f'Invalid thread specification: {thread_spec}')
E           ValueError: Invalid thread specification: 1/4-20

components\threaded_components.py:304: ValueError
__________________________ TestNut.test_nut_creation __________________________

self = <temp3.tests.test_threaded_components.TestNut testMethod=test_nut_creation>

    def setUp(self):
        """Set up test fixtures."""
        self.material = TestMaterial('Steel', {'yield_strength': 250 * ureg.MPa})
>       self.nut = Nut(thread_spec='1/4-20', width_across_flats=7 / 16 *
            ureg.inch, height=7 / 32 * ureg.inch, material=self.material)

tests\test_threaded_components.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
components\threaded_components.py:417: in __init__
    super().__init__(thread_spec=thread_spec, threaded_length=height,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <components.threaded_components.Nut object at 0x000001C976CE55B0>
thread_spec = '1/4-20', threaded_length = <Quantity(0.21875, 'inch')>
material = <tests.test_base_component.TestMaterial object at 0x000001C976CE7C20>

    def __init__(self, thread_spec: str, threaded_length: Quantity, material: Material) -> None:
        """Initialize ThreadedComponent.
    
        Args:
            thread_spec: Thread specification (e.g., "1/4-20")
            threaded_length: Length of threaded section
            material: Component material
        """
        BaseComponent.__init__(self, material=material)
    
        # Validate thread specification
        if not is_valid_thread_spec(thread_spec):
>           raise ValueError(f'Invalid thread specification: {thread_spec}')
E           ValueError: Invalid thread specification: 1/4-20

components\threaded_components.py:304: ValueError
________________________ TestNut.test_property_setters ________________________

self = <temp3.tests.test_threaded_components.TestNut testMethod=test_property_setters>

    def setUp(self):
        """Set up test fixtures."""
        self.material = TestMaterial('Steel', {'yield_strength': 250 * ureg.MPa})
>       self.nut = Nut(thread_spec='1/4-20', width_across_flats=7 / 16 *
            ureg.inch, height=7 / 32 * ureg.inch, material=self.material)

tests\test_threaded_components.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
components\threaded_components.py:417: in __init__
    super().__init__(thread_spec=thread_spec, threaded_length=height,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <components.threaded_components.Nut object at 0x000001C976CE4E30>
thread_spec = '1/4-20', threaded_length = <Quantity(0.21875, 'inch')>
material = <tests.test_base_component.TestMaterial object at 0x000001C976CE7C80>

    def __init__(self, thread_spec: str, threaded_length: Quantity, material: Material) -> None:
        """Initialize ThreadedComponent.
    
        Args:
            thread_spec: Thread specification (e.g., "1/4-20")
            threaded_length: Length of threaded section
            material: Component material
        """
        BaseComponent.__init__(self, material=material)
    
        # Validate thread specification
        if not is_valid_thread_spec(thread_spec):
>           raise ValueError(f'Invalid thread specification: {thread_spec}')
E           ValueError: Invalid thread specification: 1/4-20

components\threaded_components.py:304: ValueError
________________________ TestNut.test_unit_conversion _________________________

self = <temp3.tests.test_threaded_components.TestNut testMethod=test_unit_conversion>

    def setUp(self):
        """Set up test fixtures."""
        self.material = TestMaterial('Steel', {'yield_strength': 250 * ureg.MPa})
>       self.nut = Nut(thread_spec='1/4-20', width_across_flats=7 / 16 *
            ureg.inch, height=7 / 32 * ureg.inch, material=self.material)

tests\test_threaded_components.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
components\threaded_components.py:417: in __init__
    super().__init__(thread_spec=thread_spec, threaded_length=height,
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <components.threaded_components.Nut object at 0x000001C976E1BB00>
thread_spec = '1/4-20', threaded_length = <Quantity(0.21875, 'inch')>
material = <tests.test_base_component.TestMaterial object at 0x000001C976E1ACF0>

    def __init__(self, thread_spec: str, threaded_length: Quantity, material: Material) -> None:
        """Initialize ThreadedComponent.
    
        Args:
            thread_spec: Thread specification (e.g., "1/4-20")
            threaded_length: Length of threaded section
            material: Component material
        """
        BaseComponent.__init__(self, material=material)
    
        # Validate thread specification
        if not is_valid_thread_spec(thread_spec):
>           raise ValueError(f'Invalid thread specification: {thread_spec}')
E           ValueError: Invalid thread specification: 1/4-20

components\threaded_components.py:304: ValueError
____________________ TestThreadedPlate.test_imperial_units ____________________

self = <temp3.tests.test_threaded_plate.TestThreadedPlate testMethod=test_imperial_units>

    def setUp(self):
        """Set up test fixtures before each test method."""
>       self.material = Material("Steel")
E       TypeError: Can't instantiate abstract class Material without an implementation for abstract method 'identify'

tests\test_threaded_plate.py:12: TypeError
____________________ TestThreadedPlate.test_initialization ____________________

self = <temp3.tests.test_threaded_plate.TestThreadedPlate testMethod=test_initialization>

    def setUp(self):
        """Set up test fixtures before each test method."""
>       self.material = Material("Steel")
E       TypeError: Can't instantiate abstract class Material without an implementation for abstract method 'identify'

tests\test_threaded_plate.py:12: TypeError
_____________ TestThreadedPlate.test_initialization_with_defaults _____________

self = <temp3.tests.test_threaded_plate.TestThreadedPlate testMethod=test_initialization_with_defaults>

    def setUp(self):
        """Set up test fixtures before each test method."""
>       self.material = Material("Steel")
E       TypeError: Can't instantiate abstract class Material without an implementation for abstract method 'identify'

tests\test_threaded_plate.py:12: TypeError
__________ TestThreadedPlate.test_initialization_with_numeric_values __________

self = <temp3.tests.test_threaded_plate.TestThreadedPlate testMethod=test_initialization_with_numeric_values>

    def setUp(self):
        """Set up test fixtures before each test method."""
>       self.material = Material("Steel")
E       TypeError: Can't instantiate abstract class Material without an implementation for abstract method 'identify'

tests\test_threaded_plate.py:12: TypeError
________________ TestThreadedPlate.test_invalid_clearance_hole ________________

self = <temp3.tests.test_threaded_plate.TestThreadedPlate testMethod=test_invalid_clearance_hole>

    def setUp(self):
        """Set up test fixtures before each test method."""
>       self.material = Material("Steel")
E       TypeError: Can't instantiate abstract class Material without an implementation for abstract method 'identify'

tests\test_threaded_plate.py:12: TypeError
_______________ TestThreadedPlate.test_invalid_property_values ________________

self = <temp3.tests.test_threaded_plate.TestThreadedPlate testMethod=test_invalid_property_values>

    def setUp(self):
        """Set up test fixtures before each test method."""
>       self.material = Material("Steel")
E       TypeError: Can't instantiate abstract class Material without an implementation for abstract method 'identify'

tests\test_threaded_plate.py:12: TypeError
_________________ TestThreadedPlate.test_invalid_thread_spec __________________

self = <temp3.tests.test_threaded_plate.TestThreadedPlate testMethod=test_invalid_thread_spec>

    def setUp(self):
        """Set up test fixtures before each test method."""
>       self.material = Material("Steel")
E       TypeError: Can't instantiate abstract class Material without an implementation for abstract method 'identify'

tests\test_threaded_plate.py:12: TypeError
_______________ TestThreadedPlate.test_invalid_threaded_length ________________

self = <temp3.tests.test_threaded_plate.TestThreadedPlate testMethod=test_invalid_threaded_length>

    def setUp(self):
        """Set up test fixtures before each test method."""
>       self.material = Material("Steel")
E       TypeError: Can't instantiate abstract class Material without an implementation for abstract method 'identify'

tests\test_threaded_plate.py:12: TypeError
___________________ TestThreadedPlate.test_property_setters ___________________

self = <temp3.tests.test_threaded_plate.TestThreadedPlate testMethod=test_property_setters>

    def setUp(self):
        """Set up test fixtures before each test method."""
>       self.material = Material("Steel")
E       TypeError: Can't instantiate abstract class Material without an implementation for abstract method 'identify'

tests\test_threaded_plate.py:12: TypeError
___________________ TestThreadedPlate.test_unit_conversion ____________________

self = <temp3.tests.test_threaded_plate.TestThreadedPlate testMethod=test_unit_conversion>

    def setUp(self):
        """Set up test fixtures before each test method."""
>       self.material = Material("Steel")
E       TypeError: Can't instantiate abstract class Material without an implementation for abstract method 'identify'

tests\test_threaded_plate.py:12: TypeError
_______________________ TestUnitUtils.test_to_imperial ________________________

self = <temp3.tests.test_unit_utils.TestUnitUtils testMethod=test_to_imperial>

    def test_to_imperial(self):
        """Test conversion to imperial units."""
        self.assertEqual(to_imperial(25.4 * ureg.millimeter), 1 * ureg.inch)
        self.assertTrue(compare_with_tolerance(to_imperial(4.44822 * ureg.newton), 1 * ureg.lbf, 1e-6))
        self.assertTrue(compare_with_tolerance(to_imperial(6894.76 * ureg.pascal), 1 * ureg.psi, 1e-6))
>       self.assertEqual(to_imperial(300 * ureg.kelvin).units, ureg.degF.units)
E       AttributeError: 'Unit' object has no attribute 'units'. Did you mean: '_units'?

tests\test_unit_utils.py:15: AttributeError
________________________ TestUnitUtils.test_to_metric _________________________

self = <temp3.tests.test_unit_utils.TestUnitUtils testMethod=test_to_metric>

    def test_to_metric(self):
        """Test conversion to metric units."""
        self.assertEqual(to_metric(1 * ureg.inch), 25.4 * ureg.millimeter)
        self.assertTrue(compare_with_tolerance(to_metric(1 * ureg.lbf), 4.44822 * ureg.newton, 1e-6))
        psi = 1 * ureg.psi
>       self.assertEqual(str(to_metric(psi).units), 'megapascal')
E       AssertionError: 'MPa' != 'megapascal'
E       - MPa
E       + megapascal

tests\test_unit_utils.py:30: AssertionError
_________________ TestUnitUtils.test_validate_unit_dimension __________________

self = <temp3.tests.test_unit_utils.TestUnitUtils testMethod=test_validate_unit_dimension>

    def test_validate_unit_dimension(self):
        """Test dimension validation."""
        self.assertTrue(is_valid_unit_type(1 * ureg.meter, 'length'))
>       self.assertTrue(validate_unit_dimension(1 * ureg('kg/m^3'),
            '[mass]/[length]^3'))
E       AssertionError: False is not true

tests\test_unit_utils.py:77: AssertionError
============================== warnings summary ===============================
units_config\__init__.py:38
  C:\Users\benbu\Code\temp3\units_config\__init__.py:38: DeprecationWarning: This function will be removed in future versions of pint.
  Use ureg.formatter.default_format
    ureg.default_format = '~P'  # Compact pretty format

tests\test_base_component.py:124
  C:\Users\benbu\Code\temp3\tests\test_base_component.py:124: PytestCollectionWarning: cannot collect test class 'TestMaterial' because it has a __init__ constructor (from: tests/test_base_component.py)
    class TestMaterial(Material):

tests\test_base_component.py:124
  C:\Users\benbu\Code\temp3\tests\test_base_component.py:124: PytestCollectionWarning: cannot collect test class 'TestMaterial' because it has a __init__ constructor (from: tests/test_clamped_components.py)
    class TestMaterial(Material):

tests\test_base_component.py:124
  C:\Users\benbu\Code\temp3\tests\test_base_component.py:124: PytestCollectionWarning: cannot collect test class 'TestMaterial' because it has a __init__ constructor (from: tests/test_junction.py)
    class TestMaterial(Material):

tests\test_base_component.py:124
  C:\Users\benbu\Code\temp3\tests\test_base_component.py:124: PytestCollectionWarning: cannot collect test class 'TestMaterial' because it has a __init__ constructor (from: tests/test_threaded_components.py)
    class TestMaterial(Material):

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
FAILED tests/test_junction.py::TestJunction::test_component_updates - ValueEr...
FAILED tests/test_junction.py::TestJunction::test_insufficient_fastener_length
FAILED tests/test_junction.py::TestJunction::test_invalid_assembly - ValueErr...
FAILED tests/test_junction.py::TestJunction::test_metric_units - ValueError: ...
FAILED tests/test_junction.py::TestJunction::test_minimum_components - Assert...
FAILED tests/test_thread_utils.py::TestThreadUtils::test_validate_thread_format
FAILED tests/test_threaded_components.py::TestFastener::test_fastener_creation
FAILED tests/test_threaded_components.py::TestFastener::test_property_setters
FAILED tests/test_threaded_components.py::TestFastener::test_unit_conversion
FAILED tests/test_threaded_components.py::TestNut::test_invalid_dimensions - ...
FAILED tests/test_threaded_components.py::TestNut::test_nut_creation - ValueE...
FAILED tests/test_threaded_components.py::TestNut::test_property_setters - Va...
FAILED tests/test_threaded_components.py::TestNut::test_unit_conversion - Val...
FAILED tests/test_threaded_plate.py::TestThreadedPlate::test_imperial_units
FAILED tests/test_threaded_plate.py::TestThreadedPlate::test_initialization
FAILED tests/test_threaded_plate.py::TestThreadedPlate::test_initialization_with_defaults
FAILED tests/test_threaded_plate.py::TestThreadedPlate::test_initialization_with_numeric_values
FAILED tests/test_threaded_plate.py::TestThreadedPlate::test_invalid_clearance_hole
FAILED tests/test_threaded_plate.py::TestThreadedPlate::test_invalid_property_values
FAILED tests/test_threaded_plate.py::TestThreadedPlate::test_invalid_thread_spec
FAILED tests/test_threaded_plate.py::TestThreadedPlate::test_invalid_threaded_length
FAILED tests/test_threaded_plate.py::TestThreadedPlate::test_property_setters
FAILED tests/test_threaded_plate.py::TestThreadedPlate::test_unit_conversion
FAILED tests/test_unit_utils.py::TestUnitUtils::test_to_imperial - AttributeE...
FAILED tests/test_unit_utils.py::TestUnitUtils::test_to_metric - AssertionErr...
FAILED tests/test_unit_utils.py::TestUnitUtils::test_validate_unit_dimension
============ 26 failed, 53 passed, 2 skipped, 5 warnings in 1.61s =============
